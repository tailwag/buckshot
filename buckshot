#!/usr/bin/python
#
# BuckShot HTTP troubleshooting suite.
# Devin Shoemaker - 2019
#
# MAJOR: 1
# MINOR: 0
# PATCH: 0
# EXTRA: 0 

import os
import re
import sys
import time
import uuid
import socket
import hashlib
import datetime
import requests
import argparse
import subprocess
from dns.resolver import query

def getMonth (monthIn):
    return{
            'Jan' : "01",
            'Feb' : "02",
            'Mar' : "03",
            'Apr' : "04",
            'May' : "05",
            'Jun' : "06",
            'Jul' : "07",
            'Aug' : "08",
            'Sep' : "09",
            'Oct' : "10",
            'Nov' : "11",
            'Dec' : "12"
    }[monthIn]

def addNulls (strIn):
    intIn = int(strIn)
    if intIn < 10:
        return '0' + strIn
    else:
        return strIn

# set log file 
filePath = os.path.expanduser("~") + '/.buckshot'

# get salt for ID generation
uuidGen = str(uuid.uuid4())

# get current epoch time 
epochTime = str(time.time())

# border for logging
border = '---------------'

def __fire (searchDom):
    # generate log ID
    md5form = hashlib.md5()
    updateStr = str(uuidGen + epochTime + searchDom).encode('utf-8')
    md5form.update(updateStr)
    md5out = str(md5form.hexdigest())[:6]
    
    if searchDom[:7] != 'http://' and searchDom[:8] != 'https://':
        statTest = 'http://' + searchDom
    else:
        statTest = searchDom
    try:
        rTest = requests.get(statTest)
    except:
        sys.exit('Could not load site')

    # write top border to log file 
    topBorder = ' '.join(['\n', border, md5out, searchDom, epochTime.split(".")[0], border, '\n']) 
    logFile = open(filePath, "a+")
    logFile.write(topBorder)
    logFile.close()

    # do raw analysis 
    wget = 'wget -a ' + filePath + ' --delete-after -nv  -Hp -U "buckshot site tester a0.0.1" ' + searchDom 
    curlpath = 'curl -LIs ' + searchDom + ' | grep -Eo "(HTTP|Location:|^%).+\\b" | sed \'s:\(HTTP\|Location\):%getstat%\|path\|\\1:g\' >> ' + filePath
    curlstat = 'curl -Lis -o /dev/null -w "%%getstat%%|address|%{remote_ip}\\n%%getstat%%|connect|%{time_connect}\\n%%getstat%%|redirect|%{time_redirect}\\n%%getstat%%|ttfb|%{time_starttransfer}\\n%%getstat%%|total|%{time_total}\\n" ' + searchDom + ' >> ' + filePath
    result = subprocess.Popen(wget, stdout=subprocess.PIPE, shell=True).communicate()[0]
    result = subprocess.Popen(curlpath, stdout=subprocess.PIPE, shell=True).communicate()[0]
    result = subprocess.Popen(curlstat, stdout=subprocess.PIPE, shell=True).communicate()[0]
    
    # open log after raw write
    with open(filePath) as readFile:
        shotlog = readFile.read().splitlines()
    
    # retrieve list of past logs 
    logStart = [i for i, x in enumerate(shotlog) if x[1:16] == border]
    
    # reformat output from wget into buckshot format
    #    - define regexes used for 
    if len(logStart) != 0:
        curLog   = shotlog[logStart[-1]:]
        pageReqs = list(filter(re.compile(r'URL:[^ ]*').search, curLog))
        pageErrs = list(filter(re.compile(r'^https?://[^:]*').search, curLog))
        loadTime = list(filter(re.compile(r'Total wall clock time.*').search, curLog))

    #    - reformat total load time from wget 
        if len(loadTime) != 0:
            loadSec = loadTime[-1].split(' ')[-1]
            logFile = open(filePath, "a+")
            logFile.write("|".join(['%getstat%', 'full', loadSec]) + '\n')

    #    - reformat all successfull page requisites from wget  
        for req in pageReqs:
            logFile = open(filePath, "a+")
            request = req.split(' ')[2].replace("URL:", "")
            logFile.write('|'.join(['%pagereq%', '200', request]) + '\n')
            logFile.close()

    #    - reformat all unsucessful page requests from wget 
        for err in pageErrs:
            errReq  = [i for i, x in enumerate(curLog) if x == err]
            errOut  = ":".join(err.split(":")[0:2])
            errLine = curLog[errReq[0] + 1]
            errCode = errLine.split(' ')[3].replace(":", "")
            logFile = open(filePath, "a+")
            logFile.write('|'.join(['%pagereq%', errCode, errOut]) + '\n')
            logFile.close()
    
    # retrieve all DNS records for domain
    DNS = ['A', 'CNAME', 'NS', 'MX', 'SOA', 'TXT']
    DNSlist = []
    dnsDom = searchDom.replace("https://", "").replace("http://", "").split('/')[0]
    for recType in DNS:
        try:
            for rdata in query(dnsDom, recType):
                DNSlist.append("%dnsrqst%" + "|" + recType + "|" + str(rdata))
        except:
            dnerr = True
    
    # write all DNS records to log
    logFile = open(filePath, "a+")
    for recOut in DNSlist:
        logFile.write(recOut + '\n')

    logFile.close()
    
    # retrieve SSL certificate info from openssl x509
    osslDom = searchDom.replace("http://", "").replace("https://", "").split("/")[0]
    osslCom = 'openssl s_client -showcerts -servername ' + osslDom + ' -connect ' + osslDom + ':443 < /dev/null 2>&1 | openssl x509 -text 2> /dev/null'
    x509raw = subprocess.Popen(osslCom, stdout=subprocess.PIPE, shell=True).communicate()[0]
    x509lst = x509raw.splitlines()
    
    # parse raw x509 output and write to log file
    logFile = open(filePath, "a+")
    for line in x509lst:
        stripped = line.lstrip().decode('utf-8')

        if 'serial' in locals():
            left  = 'serial'
            right = stripped
            del serial
        if stripped == "Serial Number:":
            serial  = True

        if re.match(r'Issuer\s?:.*', stripped):
            left  = 'issuer'
            right = ':'.join(stripped.split(":")[1:])
    
        if re.match(r'Not Before\s?:.*', stripped):
            left  = 'startdate'
            fullna = ':'.join(stripped.split(":")[1:]).lstrip()
            one, two, thr, fou, fiv = fullna.split(" ")[0:5]
            month = str(getMonth(one))
            if two == '':
                day  = str(addNulls(thr))
                time = str(fou.replace(":", ""))
                year = str(fiv)
            else:
                day  = str(two)
                time = str(thr.replace(":", ""))
                year = str(fou)
    
            dattim = year + month + day + time
            right = str(datetime.datetime.strptime(dattim, '%Y%m%d%H%M%S').timestamp()).split(".")[0]
    
        if re.match(r'Not After\s?:.*', stripped):
            left  = 'expiration'
            fullna = ':'.join(stripped.split(":")[1:]).lstrip()
            one, two, thr, fou, fiv = fullna.split(" ")[0:5]
            month = str(getMonth(one))
            if two == "":
                day  = str(addNulls(thr))
                time = str(fou.replace(":", ""))
                year = str(fiv)
            else:
                day  = str(two)
                time = str(thr.replace(":", ""))
                year = str(fou)
    
            dattim = year + month + day + time
            right = str(datetime.datetime.strptime(dattim, '%Y%m%d%H%M%S').timestamp()).split(".")[0]
        
        if re.match(r'Subject\s?:.*', stripped):
            left  = 'subject'
            right = ':'.join(stripped.split(":")[1:])
    
        if re.match(r'DNS:[^,]*', stripped):
            dnsList = stripped.split(', ')
            logFile = open(filePath, "a+")
            for dns in dnsList:
                san = dns.split(":")[-1]
                logFile.write("|".join(['%openssl%', 'san', san]) + '\n')
            logFile.close()
            
        if 'right' in locals() and right:
            logFile = open(filePath, "a+")
            logFile.write("|".join(["%openssl%", left, right]) + '\n')
            logFile.close()
            right = False

    #returns test ID of newly run test
    return md5out


def __parse (testid):
    # retreive entrine buckshot log 
    with open(filePath) as readFile:
        shotlog  = readFile.read().splitlines()
    
    # generate list of lines which cointain a buckshot test heading 
    tests = [i for i, x in enumerate(shotlog) if x[1:16] == border]

    # loop through list of headings to find specified test ID
    found = [i for i, x in enumerate(tests) if shotlog[x].split(' ')[2] == testid]

    # if test is not last test determine beginning of next test
    #       - test to parse = heading line through one line before next heading
    if len(tests) > (found[0] + 1):
        inputLog = shotlog[tests[found[0]]:(tests[found[0] + 1])]
    # if test is last test, test to parse is heading line through end of file 
    else:
        inputLog = shotlog[tests[found[0]]:]

    # retrieve test id, domain name, and epoch time from test heading
    testId, domain, epoch = inputLog[0].split(' ')[2:5]

    # convert epoch time from test heading to localtime for display
    localtime = datetime.datetime.fromtimestamp(int(epoch)).strftime('%Y-%m-%d %H:%M:%S')
    
    # define statistics dictionary 
    # example: (get A records for a domain, domain is using cloudflare or something)
    #            
    #           %%dnsrqst%%|A|104.27.160.120                    logDict['dnsrqst']['A']      ===> ['104.27.160.120', '104.27.161.120'] 
    #           %%dnsrqst%%|A|104.27.161.120
    #           %%dnsrqst%%|NS|bob.ns.cloudflare.com.           logDict['dnsrqst']['NS'][-1] ===> 'lola.ns.cloudflare.com'
    #           %%dnsrqst%%|NS|lola.ns.cloudflare.com.
    logDict = {'testinf': {'testid': testId, 'domain': domain, 'epoch': epoch, 'localtime': localtime},
               'getstat': {'path':   [], 'address':   [], 'connect':    [], 'redirect': [], 'ttfb':  [], 'total':  [], 'full': [] },
               'pagereq': {'200':    [], '301':       [], '302':        [], '401':      [], '403':   [], '404':    [], '500': [], '503': [] },
               'dnsrqst': {'A':      [], 'CNAME':     [], 'NS':         [], 'MX':       [], 'SOA':   [], 'TXT':    [] },
               'openssl': {'issuer': [], 'startdate': [], 'expiration': [], 'subject':  [], 'san':   [], 'serial': [] } }
    
    # populate statistics dictionary from log file for selected test
    for prikey in logDict.keys():
        for seckey in logDict[prikey].keys():
            results = list(filter(re.compile(r'%'+prikey+'%\|'+seckey+'\|.*').match, inputLog))
            if len(results) != 0:
                for apnd in results:
                    logDict[prikey][seckey].append(apnd.replace("%"+prikey+"%|"+seckey+"|", ""))

    # return entire stats dictionary 
    return logDict
  
def __display (logDict, popts = ['getstat', 'pagereq', 'dnsrqst', 'openssl']):
    # retrieve test information from stat dictionary  
    testId    = logDict['testinf']['testid']
    domain    = logDict['testinf']['domain']
    epoch     = logDict['testinf']['epoch']
    localtime = logDict['testinf']['localtime']

    # display test info 
    # ----- testid - localtime - domain -----
    print("\033[1;31m" + testId + "\033[0m - \033[1;37m" + localtime + "\033[0m - \033[1;35m" + domain + "\033[0m") 

    # popts is list of stats to display
    # connection stats 
    if 'getstat' in popts:
        print("  \033[0;35m==)\033[0m Connection Statistics:\033[0m")
        for stat in logDict['getstat'].keys():
            left = "    " + stat.capitalize()
            for value in logDict['getstat'][stat]:
                print("%-15s:  %2s" % (left, value))
                left = ""
        print('\n')

    # dns info 
    if 'dnsrqst' in popts:
        print("  \033[0;35m==)\033[0m DNS Information:\033[0m")
        for rcrd in logDict['dnsrqst'].keys():
            if len(logDict['dnsrqst'][rcrd]) != 0:
                left = "        " + rcrd
                for res in logDict['dnsrqst'][rcrd]:
                    print("%-15s:  %2s" % (left, res))
                    left = ""
        print('\n')

    # page requisites
    if 'pagereq' in popts:
        print("  \033[0;35m==)\033[0m Page Requisites:\033[0m")
        ncol = '\033[0m'
        for preq in logDict['pagereq'].keys():
            pcol = {'200': "\033[1;32m", '301': "\033[1;34m", '302': "\033[1;34m", 
                    '401': "\033[1;31m", '403': "\033[1;31m", '404': "\033[1;31m",
                    '500': "\033[1;37m", '503': "\033[1;33m"}
            ncol = '\033[0m'
            left =  str("        " + pcol[preq] + preq + ncol)
            for value in logDict['pagereq'][preq]:
                print("%-26s:  %2s" % (left, value))
        print('\n')

    # ssl information
    if 'openssl' in popts:
        print("  \033[0;35m==)\033[0m SSL Information:\033[0m")
        for test in logDict['openssl'].keys():
            if len(logDict['openssl'][test]) != 0:
                left = "    " + test.capitalize().replace("San", "SANs")
                if test == 'issuer' or test == 'subject':
                    #preForm = re.split(r'[A-Z]{1,2}\s?=', logDict['openssl'][test][0])
                    #second  = preForm.pop().lstrip()
                    #first   = " ".join(preForm).lstrip()
                    #print("%-15s:  %2s" % ("    " + test.capitalize(), first))
                    #print("%-15s:  %2s" % ('', second))
                    splitList = logDict['openssl'][test][0].split(' ')
                    if len(splitList) > 20:
                        print("%-15s:  %2s" % ("    " + test.capitalize(), " ".join(splitList[:10])))
                        print("%-15s:  %2s" % ("", " ".join(splitList[10:20])))
                        print("%-15s:  %2s" % ("", " ".join(splitList[20:])))
                    elif len(splitList) > 10:
                        print("%-15s:  %2s" % ("    " + test.capitalize(), " ".join(splitList[:10])))
                        print("%-15s:  %2s" % ("", " ".join(splitList[10:])))
                    else:
                        print("%-15s:  %2s" % ("    " + test.capitalize(), " ".join(splitList)))

                elif test == 'startdate' or test == 'expiration':
                    right = datetime.datetime.fromtimestamp(int(logDict['openssl'][test][-1])).strftime('%Y-%m-%d %H:%M:%S')
                    left  = "    " + test.capitalize()
                    print("%-15s:  %2s" % (left, right))
        
                else:
                    for res in logDict['openssl'][test]:
                        print("%-15s:  %2s" % (left, res))
                        left = ""
        print('\n')

def __list (countin = "20", domain = False):
    # number of tests to display
    tail = int(countin)

    # retrieve entire buckshot log 
    with open(filePath) as logFile:
        shotlog = logFile.read().splitlines()

    # compile list of all test headings 
    alltests = [i for i, x in enumerate(shotlog) if x[1:16] == border]

    # total number of tests present in log
    count = len(alltests)

    # compile list of all tests which should be displayed
    tests = alltests[-tail:]

    # define all values for column style text formatting
    lendom = 0
    lenadd = 0
    lenldt = 0
    rowlen = 0

    testlst = []

    for test in tests:
        # retrieve test id, domain, and test time from test heading 
        tid, dom, time = shotlog[test].split(' ')[2:5]

        # length of longest domain in log 
        if len(dom) > lendom:
            lendom = len(dom)

        # convert epoch to localtime
        local = datetime.datetime.fromtimestamp(int(time)).strftime('%Y-%m-%d %H:%M:%S')

        # parse test to retrieve statistics dictionary 
        testStat = __parse(tid)

        # determine if test was actually successful by using wget load time
        try:
            loadTime = '\033[0;37mLoad: ' + testStat['getstat']['full'][-1] + '\033[0m'
        except IndexError:
            loadTime = '\033[0;31mError\033[0m'

        # length of longest load time in log
        if len(loadTime) > lenldt:
            lenldt = len(loadTime)

        # determine number of successful requests and number of errors
        pageReqs = 0
        pageErrs = 0
        for i in testStat['pagereq'].keys():
            pageReqs += len(testStat['pagereq'][i])
            if int(i) >= 401:
                pageErrs += len(testStat['pagereq'][i])

        # snag only fqdn from ssl tests
        strpdom = dom.replace("https://", "").replace("http://", "").split('/')[0]

        # snag wildcard domains which could cover the domain for ssl validity testing
        # if strpdom =    foo.bar.com
        #    mainwld =  *.foo.bar.com
        #    rootwld =      *.bar.com
        mainwld = '*.' + strpdom
        rootwld = '*.' + ".".join(strpdom.split(".")[1:])
        
        # get IP address, %{remote_ip} from curl
        try:
            addr = testStat['getstat']['address'][-1]
        except IndexError:
            addr = 'NULL'

        # length of longest IP for column style formatting
        if len(addr) > lenadd:
            lenadd = len(addr)

        if len(testStat['openssl']['subject']) == 0:
            sslsts  = ' \033[1;37m--No SSL--\033[0m'
        else:
            sslsts  = '  \033[1;32mValid SSL\033[0m'
            if   strpdom in testStat['openssl']['subject'][-1].split(" "):
                foundin = 'subject'
            elif mainwld in testStat['openssl']['subject'][-1].split(" "):
                foundin = 'subject'
            elif rootwld in testStat['openssl']['subject'][-1].split(" "):
                foundin = 'subject'
            elif strpdom in testStat['openssl']['san']:
                foundin = 'san'
            elif mainwld in testStat['openssl']['san']:
                foundin = 'san'
            elif rootwld in testStat['openssl']['san']:
                foundin = 'san'
            else:
                sslsts = '\033[1;33mInvalid SSL\033[0m'

            if testStat['openssl']['expiration'][-1] <= testStat['testinf']['epoch']:
                sslsts = '\033[1;31mExpired SSL\033[0m'
        
        if pageReqs < 10:
            preq = '  ' + str(pageReqs)
        elif pageReqs < 100:
            preq = ' ' + str(pageReqs)
        else:
            preq = str(pageReqs)

        if pageErrs < 10:
            perr = '  ' + str(pageErrs)
        elif pageErrs < 100:
            perr = ' ' + str(pageErrs)
        else:
            perr = str(pageErrs)

        if len(dom) > 35:
            domain = dom[:32] + '...'
            lendom = 35
        else:
            domain = dom
        row = [tid, local, domain, addr, loadTime, sslsts, preq, perr]
        if len(" - ".join(row)) > rowlen:
            rowlen = len(" - ".join(row))
        testlst.append(row)
    
    foundMsg = '\033[0;35m   \033[0m \033[1;32m' + str(count) + ' tests found'
    if count > tail:
        foundMsg += ', displaying last ' + str(tail)
    foundMsg += '\033[0m'
    topsep = ")"
    rowlen = 59 + lendom + lenadd + lenldt
    while rowlen != 0:
        topsep += "="
        rowlen -= 1


    print(foundMsg)
    print('\033[0;35m' + topsep + '\033[0m')
    lstFrm = '%-12s - %-19s - %-' + str(lendom + 11) + 's - %-' + str(lenadd + 11) + 's - %-' + str(lenldt) + 's - %-22s - %-3s req  %-3s err'
    for log in testlst:
        print(lstFrm % (' ' +
                        '\033[1;31m' + log[0] + '\033[0m', 
                        '\033[1;37m' + log[1] + '\033[0m', 
                        '\033[1;36m' + log[2] + '\033[0m',
                        '\033[1;35m' + log[3] + '\033[0m',
                                       log[4],
                                       log[5],
                        '\033[0;34m' + log[6] + '\033[0m',
                        '\033[0;33m' + log[7] + '\033[0m'))
    print("\n")

def __diff(one, two, popts = ['getstat', 'dnsrqst', 'pagereq', 'openssl']):
    dictOne = __parse(one)
    dictTwo = __parse(two)

    oneID, oneDom, oneEpoch, oneLocal = dictOne['testinf'].values()
    twoID, twoDom, twoEpoch, twoLocal = dictTwo['testinf'].values()

    if len(oneDom) > 25:
        oneAdjDom = oneDom[:22] + '...'
    else: 
        oneAdjDom = oneDom

    if len(twoDom) > 25:
        twoAdjDom = twoDom[:22] + '...'
    else: 
        twoAdjDom = twoDom

    frmStr = "%-17s - %-30s - %-36s \033[1;32m-->\033[0m %-17s - %-30s - %-36s\n" 
    print (frmStr % ('\033[1;31m' + oneID + '\033[0m', 
                     '\033[1;37m' + oneLocal + '\033[0m', 
                     '\033[1;35m' + oneAdjDom + '\033[0m', 
                     '\033[1;31m' + twoID + '\033[0m',    
                     '\033[1;37m' + twoLocal + '\033[0m',  
                     '\033[1;35m' + twoAdjDom + '\033[0m',))

    
    for display in popts:
        if display == 'getstat':
            print('  \033[0;35m==)\033[0;33m +-\033[0m Connection Stats')

            ################ RESOLVES TO   ##############################
            # determine if there's a difference 
            if dictOne['getstat']['address'] != dictTwo['getstat']['address']:
                print('      \033[0;33m|\033[0m')
                print('      \033[0;33m|---- \033[0;37mAddress\033[0m')
                print('      \033[0;33m|     \033[0;31m- ' + dictOne['getstat']['address'][0] + '\033[0m')
                print('      \033[0;33m|     \033[0;32m+ ' + dictTwo['getstat']['address'][0] + '\033[0m')

            ################ REDIRECT PATH ##############################
            # determine if there's a difference between the redirect path 
            if dictOne['getstat']['path'] != dictTwo['getstat']['path']:
                # set the total ammount of "stops" along the way 
                totalLine = len(dictOne['getstat']['path'])
                if len(dictTwo['getstat']['path']) > totalLine:
                    totalLine = len(dictTwo['getstat']['path'])

                # determine the longest line for width
                longest = 0
                for p in dictOne['getstat']['path']:
                    if len(p) > longest:
                        longest = len(p)
                for p in dictTwo['getstat']['path']:
                    if len(p) > longest:
                        longest = len(p)
        
                # if length isn't divisible by 2, make it divisible by 2
                if longest % 2 == 1:
                    longest += 1
                
                # set formatting for later, indent -> line1 -> 6 spaces -> line2
                frmStr = "%-6s\033[0;33m|\033[0m     %-" + str(longest + 39) + "s%-17s"
                
                # set the "border wing", leaving space for 6 digit uid wrapped in spaces
                bordwing = '\033[0;35m' + str('=' * int((longest - 8) / 2)) + '\033[0m'
                    
                # put the border wing on either side of each uid, then print heads
                headOne = bordwing + " \033[1;31m" + one + "\033[0m " + bordwing
                headTwo = bordwing + " \033[1;31m" + two + "\033[0m " + bordwing
                
                print('      \033[0;33m|\033[0m')
                print('      \033[0;33m|---- \033[0;37mRedirect Path\033[0m')

                print(frmStr % ("", headOne, headTwo))
       
                frmStr = "%-6s\033[0;33m|\033[0m     %-" + str(longest + 6) + "s%-6s"
                # loop through path for longest length
                loopLine = 1 
                while loopLine <= totalLine:
                    left  = ""
                    right = ""
                    # get left from dict1 if it exists
                    if len(dictOne['getstat']['path']) >= loopLine:
                        left  = dictOne['getstat']['path'][loopLine - 1]
        
                    # get right from dict2 if it exists
                    if len(dictTwo['getstat']['path']) >= loopLine:
                        right = dictTwo['getstat']['path'][loopLine - 1]
                    
                    # spit it out 
                    print(frmStr % ("", left, right))
                    loopLine += 1

            ############## CONNECTION TIME ####################################
            print('      \033[0;33m|\033[0m')
            print('      \033[0;33m|---- \033[0;37mLoad Time\033[0m')
            print('      \033[0;33m|               \033[0;35m+=============+==\033[1;31m ' + one + ' \033[0;35m==+== \033[1;31m' + two + '\033[0;35m ==+\033[0m') 

            frmStr = '%-6s\033[0;33m|\033[0m     %-10s\033[0;35m|\033[0m   %-10s\033[0;35m|\033[0m  %-10s\033[0;35m|\033[0m  %-10s\033[0;35m|\033[0m'

            
            conOne = dictOne['getstat']['connect'][0]
            redOne = dictOne['getstat']['redirect'][0]
            tfbOne = dictOne['getstat']['ttfb'][0]
            totOne = dictOne['getstat']['total'][0]

            conTwo = dictTwo['getstat']['connect'][0]
            redTwo = dictTwo['getstat']['redirect'][0]
            tfbTwo = dictTwo['getstat']['ttfb'][0]
            totTwo = dictTwo['getstat']['total'][0]

            conDif = str(float(conTwo) - float(conOne))[:9]
            redDif = str(float(redTwo) - float(redOne))[:9]
            tfbDif = str(float(tfbTwo) - float(tfbOne))[:9]
            totDif = str(float(totTwo) - float(totOne))[:9]
            

            print(frmStr % ("", " Connect", conDif, conOne, conTwo))
            print(frmStr % ("", "Redirect", redDif, redOne, redTwo))
            print(frmStr % ("", "    TTFB", tfbDif, tfbOne, tfbTwo))
            print(frmStr % ("", "   Total", totDif, totOne, totTwo))
            print('      \033[0;33m|\033[0m               \033[0;35m+=============+============+============+\033[0m')

            print('\n')
        
        if display == 'dnsrqst':  
            # loops through A, CNAME, NS etc.
            for rectype in dictOne['dnsrqst'].keys():
                # generate list of records for type from dict1
                typerecord = []
                typerecord.extend(dictOne['dnsrqst'][rectype])

                # append values from dict2 if they don't already exist
                for tworec in dictTwo['dnsrqst'][rectype]:
                    if tworec not in typerecord:
                        typerecord.append(tworec) 
                
                # check to see if there are any differences between dict 1 & 2
                # double loop method used because DNS records often come back in different orders 
                checkone = [i for i, x in enumerate(dictOne['dnsrqst'][rectype]) if x not in dictTwo['dnsrqst'][rectype]]
                checktwo = [i for i, x in enumerate(dictTwo['dnsrqst'][rectype]) if x not in dictOne['dnsrqst'][rectype]]

                # if differences exist
                if (len(checkone) + len(checktwo)) != 0:
                    # print section head if it hasn't been printed yet
                    if 'dnsHead' not in locals():
                        print('\033[0;35m  ==)\033[0m \033[0;33m+-\033[0m DNS Records')
                        dnsHead = True

                    # print subsection head
                    print('      \033[0;33m|\033[0m')
                    print('      \033[0;33m|----\033[0m \033[0;36m' + rectype + '\033[0m')

                for record in typerecord:
                    if record in dictOne['dnsrqst'][rectype] and record not in dictTwo['dnsrqst'][rectype]:
                        print('      \033[0;33m|\033[0m     \033[0;31m- ' + record + '\033[0m')
                    if record in dictTwo['dnsrqst'][rectype] and record not in dictOne['dnsrqst'][rectype]:
                        print('      \033[0;33m|\033[0m     \033[0;32m+ ' + record + '\033[0m')
            print('\n') 


        if display == 'pagereq':
            # loops through status codes: 200, 403, 404, 500
            for pagereq in dictOne['pagereq'].keys():
                # generate list of present http response codes from dict1
                preq = []
                preq.extend(dictOne['pagereq'][pagereq])

                # append values from dict2 if they don't already exist
                for tworeq in dictTwo['pagereq'][pagereq]:
                    if tworeq not in preq:
                        preq.append(tworeq) 

                # check to see of there are any differences between dict 1 & 2
                checkone = [i for i, x in enumerate(dictOne['pagereq'][pagereq]) if x not in dictTwo['pagereq'][pagereq]]
                checktwo = [i for i, x in enumerate(dictTwo['pagereq'][pagereq]) if x not in dictOne['pagereq'][pagereq]]

                # if differences exist 
                if (len(checkone) + len(checktwo)) != 0:
                    # print section head if it hasn't been printed yet
                    if 'reqHead' not in locals():
                        print('\033[0;35m  ==)\033[0m \033[0;33m+-\033[0m Page Requisites')
                        reqHead = True

                    pcol  = {'200': "\033[1;32m", '301': "\033[1;34m", '302': "\033[1;34m", 
                             '401': "\033[1;31m", '403': "\033[1;31m", '404': "\033[1;31m",
                             '500': "\033[1;37m", '503': "\033[1;33m", 'end': "\033[0m"}

                    # print subsection head
                    print('      \033[0;33m|\033[0m')
                    print('      \033[0;33m|----\033[0m \033[0;36m' + pcol[pagereq] + pagereq + pcol['end'] + '\033[0m')

                for request in preq:
                    if request in dictOne['pagereq'][pagereq] and request not in dictTwo['pagereq'][pagereq]:
                        print('      \033[0;33m|\033[0m     \033[0;31m- ' + request + '\033[0m')
                    if request in dictTwo['pagereq'][pagereq] and request not in dictOne['pagereq'][pagereq]:
                        print('      \033[0;33m|\033[0m     \033[0;32m+ ' + request + '\033[0m')
            print('\n')

        if display == 'openssl':
            if dictOne['openssl']['serial'] != dictTwo['openssl']['serial']:
                print('  \033[0;35m==) \033[0;33m+-\033[0m SSL Information')
                    
                if dictOne['openssl']['issuer'] != dictTwo['openssl']['issuer']:
                    print('      \033[0;33m|\033[0m')
                    print('      \033[0;33m|----\033[0m \033[0;37mIssuer\033[0m')
                    print('      \033[0;33m|\033[0m     \033[0;31m- ' + dictOne['openssl']['issuer'][0])
                    print('      \033[0;33m|\033[0m     \033[0;32m+ ' + dictTwo['openssl']['issuer'][0])

                if dictOne['openssl']['subject'] != dictTwo['openssl']['subject']:
                    print('      \033[0;33m|\033[0m')
                    print('      \033[0;33m|----\033[0m \033[0;37mSubject\033[0m')
                    print('      \033[0;33m|\033[0m     \033[0;31m- ' + dictOne['openssl']['subject'][0])
                    print('      \033[0;33m|\033[0m     \033[0;32m+ ' + dictTwo['openssl']['subject'][0])

                # print subsection head
                print('      \033[0;33m|\033[0m')
                print('      \033[0;33m|----\033[0m \033[0;37mSerial Number\033[0m')
                print('      \033[0;33m|\033[0m     \033[0;31m- ' + dictOne['openssl']['serial'][0])
                print('      \033[0;33m|\033[0m     \033[0;32m+ ' + dictTwo['openssl']['serial'][0])



                eStartOne = dictOne['openssl']['startdate'][0]
                eStartTwo = dictTwo['openssl']['startdate'][0]
                eExpOne   = dictOne['openssl']['expiration'][0]
                eExpTwo   = dictTwo['openssl']['expiration'][0]

                startDateOne  = datetime.datetime.fromtimestamp(int(eStartOne)).strftime('%Y-%m-%d %H:%M:%S')
                startDateTwo  = datetime.datetime.fromtimestamp(int(eStartTwo)).strftime('%Y-%m-%d %H:%M:%S')
                expirationOne = datetime.datetime.fromtimestamp(int(eExpOne)).strftime('%Y-%m-%d %H:%M:%S')
                expirationTwo = datetime.datetime.fromtimestamp(int(eExpTwo)).strftime('%Y-%m-%d %H:%M:%S')                
                

                
                # print subsection head
                print('      \033[0;33m|\033[0m')
                print('      \033[0;33m|----\033[0m \033[0;37mCert Dates\033[0m')
                print('      \033[0;33m|\033[0;35m             +===== \033[0mStart Date\033[0;35m ====+===== \033[0mExpiration\033[0;35m ====+\033[0m')
                print('      \033[0;33m|\033[1;31m      ' + one + ' \033[0;35m|\033[1;37m ' + startDateOne + ' \033[0;35m|\033[1;37m ' + expirationOne + ' \033[0;35m|')
                print('      \033[0;33m|\033[1;31m      ' + two + ' \033[0;35m|\033[1;37m ' + startDateTwo + ' \033[0;35m|\033[1;37m ' + expirationTwo + ' \033[0;35m|')
                print('      \033[0;33m|\033[0;35m             +=====================+=====================+\033[0m')

                if dictOne['openssl']['san'] != dictTwo['openssl']['san']:
                    print('      \033[0;33m|\033[0m')
                    print('      \033[0;33m|----\033[0m \033[0;37mSANs\033[0m')
                    
                    # generate list of present http response codes from dict1
                    sanlist = []
                    sanlist.extend(dictOne['openssl']['san'])

                    # append values from dict2 if they don't already exist
                    for twosan in dictTwo['openssl']['san']:
                        if twosan not in sanlist:
                            sanlist.append(twosan) 
                    
                    for san in sanlist:
                        if san in dictOne['openssl']['san'] and san not in dictTwo['openssl']['san']:
                            print('      \033[0;33m|\033[0m     \033[0;31m- ' + san + '\033[0m')
                        if san in dictTwo['openssl']['san'] and san not in dictOne['openssl']['san']:
                            print('      \033[0;33m|\033[0m     \033[0;32m+ ' + san + '\033[0m')
                    print('\n')

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                    prefix_chars='-',
                                    description="buckshot\n" + 
                                                "       Bulk (shotgun) troubleshooting for websites with historical data.\n" +
                                                "       Devin Shoemaker - 2019\n",
                                    epilog=" ")
            
parser.add_argument("-c", "--connection", help="view connection statistics", action="store_true")
parser.add_argument("-d", "--dns", help="view DNS records", action="store_true")
parser.add_argument("-p", "--page-requisites", help="view status of all page requisites (elements)", action="store_true")
parser.add_argument("-s", "--ssl", help="view summary of SSL certificate status", action="store_true")
parser.add_argument("-q", "--quiet", help="write only, no output\n\n", action="store_true")
parser.add_argument("-l", "--list", nargs="?", default="20", dest="lines", help="view a summary of all archived reports available\n\n")
parser.add_argument("-L", "--log", help="view archived report from log <uid>\n\n", dest="uid")
parser.add_argument("-D", "--diff", help="compare results from two tests\n" +
                                         "    buckshot -D af30d2 e9a00d\n" +
                                         "    buckshot -D af30d2 domain.com", dest="test")
parser.add_argument('domain', nargs="?", default="%list%", help="address to test")

args, unknown = parser.parse_known_args()

popts = []

argDict = args.__dict__
for add in argDict.keys():
    if add == 'connection' and argDict[add]:
        popts.append('getstat')
    
    if add == 'dns' and argDict[add]:
        popts.append('dnsrqst')
    
    if add == 'page_requisites' and argDict[add]:
        popts.append('pagereq')
    
    if add == 'ssl' and argDict[add]:
        popts.append('openssl')

if args.quiet:
    quiet = __fire(args.domain)
    sys.exit()

if args.uid:
    if len(popts) == 0:
        __display(__parse(args.uid))
    else:   
        __display(__parse(args.uid), popts)
    sys.exit()

if args.test:
    if not args.domain:
        sys.exit("diff requires two arguments. buckshot -h for help")
    else:
        if re.match(r'^[a-z0-9]{6}$', args.domain):
            newcomp = args.domain
        else:
            newcomp = __fire(args.domain)
        
        if len(popts) == 0:
            __diff(args.test, newcomp)
        else:
            __diff(args.test, newcomp, popts)
        sys.exit()

if not args.uid and args.domain == "%list%":
    if args.lines == None:
        __list(20)
    else:
        __list(str(args.lines))
    sys.exit()

if len(popts) == 0:
    ID = __fire(args.domain)
    __display(__parse(ID))
else:
    ID = __fire(args.domain)
    __display(__parse(ID), popts)
